### Constants

# Error types
General        = "GeneralError"
Type           = "TypeError"
IO             = "IOError"
OutOfBounds    = "OutOfBoundsError"
NotFound       = "NotFoundError"
Syntax         = "SyntaxError"
NotImplemented = "NotImplementedError"
Assertion      = "AssertionError"

### Classes

## The base class, from which every other
## class inherits
class Base {}

## The error class.
class Error {
  init $tag $msg {
    self.tag = tag
    self.msg = msg
  }
  
  def string {
    self.tag
    # format "{}: {}" with (self.tag, self.msg)
  }
}

class Test {
  init called $name {
    self.name = name
  }

  def string {
    self.name
  }
}


### Functions

# Misc

## Returns true if $obj is truthy,
## otherwise false
def $obj is truthy {
  if (obj) { true } else { false }
}

## Outputs a newline
def new line {
  print ""
}

## Throws an error if $predicate returns `false`
def assert $predicate {
  if (!do $predicate) {
    Error $Assertion "An assertion failed!"
  }
}

## Throws an error if $predicate returns `false`,
## with a given message ($msg)
def assert $predicate else $msg {
  if (!do $predicate) {
    Error $Assertion $msg
  }
}

# Collections

## Gets the element of $collection
## at $index
def $collection at $index {

}

## Returns the amount of elements
## in $collection.
def len $collection {
  fold $collection with { |acc, _| -> acc + 1 } from 0
}

## Returns $collection with $item
## appended to the end.
def append $item to $collection {
  collection + [item]
}

## Returns an array of integers representing
## each index in a collection.
def range $collection {
  \0 to (len $collection)
}

## Returns a boolean indicating whether
## $collection contains an element equal
## to $item.
def $collection contains $item {
  fold $collection with { |acc, o| -> acc || o == item } from (false)
}

## Folds $collection starting from the left,
## with the accumulator starting with $start.
def fold $collection with $block from $start {
  acc = start

  for (i : collection) {
    acc = do $block with (acc, i)
  }

  return acc
}


# Maths

## Calculates the square root of $n.
def square root of $n {
  n ** (1 / 2)
}

## Calculates the $root'th root of $n.
def $root st root of $n {
  n ** (1 / root)
}

## Calculates the $root'th root of $n.
def $root nd root of $n {
  n ** (1 / root)
}

## Calculates the $root'th root of $n.
def $root rd root of $n {
  n ** (1 / root)
}

## Calculates the $root'th root of $n.
def $root th root of $n {
  n ** (1 / root)
}
